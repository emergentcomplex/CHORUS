# Filename: .github/workflows/ci_cd.yml
#
# ðŸ”± The CHORUS Constitutional CI/CD Gatekeeper (v19 - Canonical Build/Run Separation)

name: CHORUS CI/CD Gatekeeper

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate-and-test:
    name: Run Full Verification Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Test Environment File
        run: |
          echo "COMPOSE_PROJECT_NAME=chorus-test" > .env.test
          echo "DB_HOST=postgres" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_USER=trident_user" >> .env.test
          echo "DB_PASSWORD=abcd1234" >> .env.test
          echo "DB_NAME=trident_analysis_test" >> .env.test
          echo "REDIS_HOST=redis" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env.test

      - name: 1. Validate Constitution
        run: make validate

      - name: 2. Clean Docker Environment
        run: make stop-all

      # THE DEFINITIVE FIX: Implement a two-phase build/run process.
      - name: 3. Build All Service Images
        run: |
          # Build the base image first, as the app image depends on it.
          make build-base
          # Explicitly build the application image and tag it.
          docker build -f Dockerfile -t chorus-app:test .

      - name: 4. Start Services From Pre-Built Images
        run: |
          # Use --no-build to force Compose to use the images we just built.
          docker compose --env-file .env.test -f docker-compose.test.yml up -d --no-build --wait \
          || (echo "::error::Service startup failed. Dumping logs..." && docker compose --env-file .env.test -f docker-compose.test.yml logs && exit 1)

      - name: 5. Configure CDC Connector
        run: docker compose --env-file .env.test -f docker-compose.setup.yml run --rm setup-connector

      - name: 6. Execute Test Suites
        run: |
          DOCKER_EXEC="docker compose --env-file .env.test -f docker-compose.test.yml exec chorus-tester"

          echo "[*] Running Unit Tests..."
          $DOCKER_EXEC pytest tests/unit

          echo "[*] Running Integration Tests..."
          $DOCKER_EXEC pytest tests/integration
