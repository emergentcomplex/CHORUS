# Filename: .github/workflows/ci_cd.yml
#
# ðŸ”± The CHORUS Constitutional CI/CD Gatekeeper (v15 - Aligned Verification)
#
# This workflow is the definitive, robust solution. It completely bypasses
# the faulty `docker compose build` command in the CI context by using
# primitive `docker build` commands and then running the services from
# the pre-built images. It now includes the complete environment configuration.

name: CHORUS CI/CD Gatekeeper

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate-and-test:
    name: Run Full Verification Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Test Environment File
        run: |
          echo "COMPOSE_PROJECT_NAME=chorus-test" > .env.test
          echo "DB_HOST=postgres" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_USER=trident_user" >> .env.test
          echo "DB_PASSWORD=abcd1234" >> .env.test
          echo "DB_NAME=trident_analysis_test" >> .env.test
          echo "REDIS_HOST=redis" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env.test

      - name: 1. Validate Constitution
        run: make validate

      - name: 2. Clean Docker Environment
        run: make stop-all

      - name: 3. Build All Images Explicitly
        run: |
          docker build -f Dockerfile.base -t chorus-base:latest .
          docker build -f Dockerfile -t chorus-app:test .
          docker build -f infrastructure/debezium/Dockerfile.setup -t chorus-setup-utility:latest .

      - name: 4. Start Services From Pre-Built Images
        run: docker compose --env-file .env.test -f docker-compose.test.yml up -d --no-build --wait

      - name: 5. Configure CDC Connector
        run: docker compose --env-file .env.test -f docker-compose.setup.yml run --rm setup-connector

      - name: 6. Execute Test Suites
        run: |
          DOCKER_COMPOSE_EXEC="docker compose --env-file .env.test -f docker-compose.test.yml exec chorus-tester"

          echo "[*] Running Unit Tests..."
          $DOCKER_COMPOSE_EXEC pytest --quiet tests/unit

          echo "[*] Running Integration Tests..."
          $DOCKER_COMPOSE_EXEC pytest --quiet tests/integration

          # THE DEFINITIVE FIX: The E2E test execution line is now removed, as there are no E2E tests in this phase.
