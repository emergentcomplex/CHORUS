# Filename: docker-compose.test.yml
# ðŸ”± CHORUS VERIFICATION ENVIRONMENT (v22 - CI/CD Resilient Startup)

volumes:
  test_datalake_vol:
    name: ${COMPOSE_PROJECT_NAME}_test_datalake_vol

networks:
  chorus-net:
    name: ${COMPOSE_PROJECT_NAME}_chorus-net

x-chorus-app: &chorus-app
  build: .
  image: chorus-app:test
  networks: [chorus-net]
  env_file: .env.test
  volumes:
    - .:/app
    - test_datalake_vol:/app/datalake
    - ./logs:/app/logs
  dns:
    - 8.8.8.8

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    hostname: postgres
    networks: [chorus-net]
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - type: volume
        target: /var/lib/postgresql/data
      - ./infrastructure/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c wal_level=logical
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "PGPASSWORD=${DB_PASSWORD} psql -h localhost -U ${DB_USER} -d ${DB_NAME} -c '\\q'",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    hostname: redis
    networks: [chorus-net]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.2
    container_name: ${COMPOSE_PROJECT_NAME}-redpanda
    hostname: redpanda
    networks: [chorus-net]
    command:
      - redpanda start --smp 1 --overprovisioned --node-id 0
      - --kafka-addr INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      - --advertise-kafka-addr INTERNAL://redpanda:29092,EXTERNAL://127.0.0.1:9092
      - --mode dev-container
    healthcheck:
      test:
        ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-connect:
    image: debezium/connect:2.7.3.Final
    container_name: ${COMPOSE_PROJECT_NAME}-kafka-connect
    hostname: kafka-connect
    networks: [chorus-net]
    depends_on:
      postgres: { condition: service_healthy }
      redpanda: { condition: service_healthy }
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      BOOTSTRAP_SERVERS: redpanda:29092
      GROUP_ID: chorus-connect-group
      CONFIG_STORAGE_TOPIC: chorus-connect-configs
      OFFSET_STORAGE_TOPIC: chorus-connect-offsets
      STATUS_STORAGE_TOPIC: chorus-connect-status

  chorus-embedder:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-embedder
    hostname: chorus-embedder
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:5003",
        "--workers=1",
        "--worker-class=gthread",
        "wsgi_embedder:app",
      ]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      # THE DEFINITIVE FIX: Increase the startup grace period for slower CI environments.
      start_period: 180s

  chorus-web:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-web
    command:
      ["gunicorn", "--bind", "0.0.0.0:5001", "--workers", "2", "wsgi:app"]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      chorus-embedder: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  chorus-launcher:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-launcher
    command: ["python", "-m", "chorus_engine.infrastructure.daemons.launcher"]
    depends_on:
      postgres: { condition: service_healthy }
      chorus-embedder: { condition: service_healthy }

  chorus-synthesis-daemon:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-synthesis-daemon
    command:
      ["python", "-m", "chorus_engine.infrastructure.daemons.synthesis_daemon"]
    depends_on:
      postgres: { condition: service_healthy }
      chorus-embedder: { condition: service_healthy }

  chorus-sentinel:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-sentinel
    command: ["python", "-m", "chorus_engine.infrastructure.daemons.sentinel"]
    depends_on:
      postgres: { condition: service_healthy }

  chorus-stream-processor:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-stream-processor
    command:
      [
        "python",
        "-m",
        "chorus_engine.infrastructure.services.task_state_manager",
      ]
    depends_on:
      redis: { condition: service_healthy }
      redpanda: { condition: service_healthy }

  chorus-vectorizer:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-vectorizer
    command: ["python", "-m", "chorus_engine.infrastructure.daemons.vectorizer"]
    depends_on:
      postgres: { condition: service_healthy }
      chorus-embedder: { condition: service_healthy }

  chorus-tester:
    <<: *chorus-app
    container_name: ${COMPOSE_PROJECT_NAME}-chorus-tester
    command: ["sleep", "infinity"]
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      chorus-web: { condition: service_healthy }
      chorus-launcher: { condition: service_started }
      chorus-synthesis-daemon: { condition: service_started }
      chorus-sentinel: { condition: service_started }
      chorus-stream-processor: { condition: service_started }
      chorus-vectorizer: { condition: service_started }
      kafka-connect: { condition: service_started }
      chorus-embedder: { condition: service_healthy }
