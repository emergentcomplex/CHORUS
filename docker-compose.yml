# ðŸ”± CHORUS Base Compose File (v4 - The Final, Correct Syntax)

# THE DEFINITIVE FIX: Use a top-level 'x-' extension field for reusable blocks.
# This is the canonical, standard, and correct way to do this in Docker Compose.
x-chorus-app: &chorus-app
  build:
    context: .
    dockerfile: Dockerfile
    target: production
  image: chorus-app-prod:latest
  networks: [chorus-net]
  environment:
    - DB_HOST=postgres
    - DB_PORT=5432
    - DB_USER=${DB_USER:-trident_user}
    - DB_PASSWORD=${DB_PASSWORD:-abcd1234}
    - DB_NAME=${DB_NAME:-trident_analysis}
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - KAFKA_BROKER=redpanda:29092
    - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    - SENTINEL_WORKERS=${SENTINEL_WORKERS:-4}
    - PGPASSWORD=${DB_PASSWORD:-abcd1234}
  volumes:
    - ./datalake:/app/datalake
    - ./models:/app/models
    - ./logs:/app/logs

services:
  postgres:
    image: pgvector/pgvector:pg16
    hostname: postgres
    networks: [chorus-net]
    ports: ["5432:5432"]
    environment:
      POSTGRES_USER: ${DB_USER:-trident_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-abcd1234}
      POSTGRES_DB: ${DB_NAME:-trident_analysis}
    command: postgres -c wal_level=logical
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-trident_user} -d ${DB_NAME:-trident_analysis}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    hostname: redis
    networks: [chorus-net]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.2
    hostname: redpanda
    networks: [chorus-net]
    ports: ["9092:9092", "8080:8080"]
    command:
      - redpanda
      - start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      - --advertise-kafka-addr INTERNAL://redpanda:29092,EXTERNAL://127.0.0.1:9092
      - --mode dev-container
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-connect:
    image: debezium/connect:2.7.3.Final
    hostname: kafka-connect
    networks: [chorus-net]
    ports: ["8083:8083"]
    depends_on:
      redpanda: { condition: service_healthy }
      postgres: { condition: service_healthy }
    environment:
      BOOTSTRAP_SERVERS: redpanda:29092
      GROUP_ID: chorus-prod-group
      CONFIG_STORAGE_TOPIC: chorus-connect-configs
      OFFSET_STORAGE_TOPIC: chorus-connect-offsets
      STATUS_STORAGE_TOPIC: chorus-connect-status
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  chorus-web:
    <<: *chorus-app # Use the alias to merge the properties
    ports: ["5001:5001"]
    command: ["uv", "run", "gunicorn", "--bind", "0.0.0.0:5001", "--workers", "4", "chorus_engine.infrastructure.web.web_ui:app"]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }

  chorus-launcher:
    <<: *chorus-app
    command: ["uv", "run", "python", "-m", "chorus_engine.infrastructure.daemons.launcher"]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka-connect: { condition: service_healthy }

  chorus-sentinel:
    <<: *chorus-app
    command: ["uv", "run", "python", "-m", "chorus_engine.infrastructure.daemons.sentinel"]
    depends_on:
      postgres: { condition: service_healthy }

  chorus-stream-processor:
    <<: *chorus-app
    command: ["uv", "run", "python", "-m", "chorus_engine.infrastructure.services.task_state_manager"]
    depends_on:
      redis: { condition: service_healthy }
      kafka-connect: { condition: service_healthy }

  chorus-tester:
    <<: *chorus-app
    command: ["sleep", "infinity"]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka-connect: { condition: service_healthy }

networks:
  chorus-net:
    driver: bridge
