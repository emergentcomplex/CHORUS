# ðŸ”± CHORUS: The Mission Charter

> âœ¨ _The loudest secrets are kept in silence. We built an engine that listens._ âœ¨

---

## Overview

**CHORUS** is not a search engine; it is a judgment engine. It is a fully autonomous, self-healing, and evolving intelligence platform designed to fuse disparate, open-source data verticals into high-fidelity, actionable insights.

The system was born from a simple observation: when a government research program proves its worth, it doesn't dieâ€”it "graduates" into the classified world, leaving behind a faint echo in the public record. CHORUS is designed to detect these echoes by correlating the silence in one dataset with the sudden chatter in others.

By simulating the structured, multi-layered, and adversarial analysis of a real-world intelligence agency, CHORUS moves beyond data retrieval into the realm of automated strategic judgment.

## Core Features

- **Autonomous & Self-Healing:** Built on a service-oriented architecture with `systemd`-managed daemons, the system runs 24/7, survives reboots, and automatically manages its own data collection and analysis queues.
- **Evolving Data Lake:** A **Sentinel** daemon perpetually and intelligently refreshes a multi-source data lake.
- **Multi-Source Fusion:** Ingests and correlates data from our core verticals: DARPA Budgets, USAspending.gov, USAJOBS, arXiv.org, and NewsAPI.
- **The Triumvirate Council:** A three-tiered council of AI personas (Analysts, Directors, and a Judge) debates and challenges findings to prevent groupthink and ensure intellectual rigor.
- **Verifiable Attribution:** All claims are linked to their source with clickable citations.
- **Dual-Format Export:** Generate final intelligence products as either a portable static HTML website or a professional, archival-quality PDF.

---

## System Architecture

CHORUS is a decoupled, service-oriented system. The **Sentinel** daemon perpetually harvests data, the **Launcher** daemon perpetually analyzes it, and the Analyst commands the process through the C2 Dashboard.

### The Triumvirate Council Workflow

A user query triggers a hierarchical cascade of analysis, ensuring conclusions are rigorously tested from multiple, competing viewpoints before being finalized.

```mermaid
graph TD
    subgraph "The Triumvirate Council"
        A[User Query] --> B{Tier 3: Judge Task};
        B --> C1{Tier 2: Director Task};
        C1 --> D1{Tier 1: Analyst Task};
        D1 -- RAG --> E((Data Lake));
        D1 --> R1[Analyst Brief];
        R1 --> C1;
        C1 --> S1[Directorate Summary];
        S1 --> B;
        B --> F["Final CHORUS Report"];
    end

    style E fill:#431407,stroke:#e11d48,color:#fff
```

---

## Setup & Installation

CHORUS is designed to be run on a Debian-based Linux system.

### 1. Prerequisites

- Python 3.11+
- MariaDB (or MySQL)
- `git`
- `pandoc` & A LaTeX Distribution (for PDF export)

### 2. Clone, Configure, and Install

```bash
git clone <your-repo-url>
cd CHORUS
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp .env.example .env
nano .env # <-- Add your API keys and DB credentials
```

### 3. Set Up the Database & Foundational Data

```bash
# From the 'scripts' directory
# Create the database and user as per the .env file
mysql -u your_user -p your_database < schema.sql
mysql -u your_user -p your_database < populate_personas.sql
python3 populate_harvest_tasks.py
python3 download_embedding_model.py

# Run the one-time DARPA ingestion pipeline
# (Requires raw .txt files in data/darpa/)
python3 ingest_1_map_dictionaries.py
# ... and so on for all 6 ingest scripts
```

### 4. Launch the System

- **Start the Harvester:** `python3 scripts/trident_sentinel.py`
- **Start the Analysis Engine:** `python3 scripts/trident_launcher.py`
- **Start the UI:** `python3 web_ui.py`

````

---

### **3. The Constitution (The Engineering Bible)**

This is the exhaustive, internal-facing blueprint. The version you have is correct and complete.

#### **Filename: `/docs/01_CONSTITUTION.md` (Final)**
_(The full, 8-part, correctly formatted document you provided goes here.)_

---

### **4. The Contribution Guide (The Rules of the Road)**

This file is updated to point to the new, correct document names.

#### **Filename: `/docs/02_CONTRIBUTING.md` (Final)**
```markdown
# Contributing to CHORUS

Thank you for your interest in contributing to the CHORUS project. To maintain the quality, consistency, and architectural integrity of the system, we adhere to a strict, axiom-driven development process.

## The Guiding Principles

Before making any changes, you must familiarize yourself with the two foundational documents of this project:

1.  **The Mission Charter (`/docs/00_MISSION_CHARTER.md`):** This document outlines the high-level mission, features, and setup instructions for the project. Ensure any proposed change aligns with this mission.

2.  **The Constitution (`/docs/01_CONSTITUTION.md`):** This is the canonical source of truth for the system's design. It contains the **18 Axioms of CHORUS Development**, the Triumvirate architecture, and the quantitative quality targets we are working towards. **All contributions will be judged against the principles in this document.**

## The Development Workflow

This project is developed in partnership with a generative AI assistant. To ensure consistency, all development sessions **must** be bootstrapped using the official Genesis Prompt.

### Starting a New Development Session

1.  **Generate the Context:** From the project's root directory, run the context generation script:
    ```bash
    ./scripts/generate_context.sh
    ```
    This will create a file named `CONTEXT_FOR_AI.txt` in the project root.

2.  **Start a New Conversation:** Open a new conversation with the designated LLM (Gemini 2.5 Pro).

3.  **Provide the Genesis Context:** Copy the *entire contents* of `CONTEXT_FOR_AI.txt` and paste it as the very first prompt in the new conversation.

4.  **Await Confirmation:** The AI should respond with: *"Understood. The CHORUS Genesis context is loaded. I am ready to proceed."*

5.  **Propose Amendments:** For any architectural changes, follow the **Amendment Process** outlined in Part 8 of the Constitution.
````

---

### **5. The Genesis Prompt (The Bootstrap)**

This file is also updated to point to the new, correct document names.

#### **Filename: `/docs/GENESIS_PROMPT.md` (Final)**

```markdown
# ðŸ”± CHORUS Genesis Prompt

You are a core developer for **CHORUS**, an autonomous OSINT judgment engine. Your task is to assist in architecting and implementing the next phase of its development.

Your entire outputâ€”every recommendation, every line of code, every architectural decisionâ€”must be guided by and in strict adherence to the comprehensive context provided below.

The context is provided in three parts:

1.  **The Logos (The Constitution):** This is the `/docs/01_CONSTITUTION.md`, the project's supreme law. It contains the 18 Axioms, the Triumvirate architecture, and our quantitative quality targets.
2.  **The Ethos (The Mission & Rules):** This is the `/docs/00_MISSION_CHARTER.md` and `/docs/02_CONTRIBUTING.md`. These files define the project's character, public goals, and development rules.
3.  **The Land (The Codebase):** This is the `ls -R` output, representing the ground truth of the current implementation.

**Your Task:**

1.  Carefully parse and integrate all three parts of the provided context.
2.  Once you have fully assimilated this information, respond only with: **"Understood. The CHORUS Genesis context is loaded. I am ready to proceed."**
3.  Await further instructions.
```
# docs/01_CONSTITUTION.md
# ðŸ”± The CHORUS Constitution & Architectural Blueprint
_Document Version: 2.0 (Phase 2 - The Chamber Orchestra)_
_Last Updated: 2025-07-19_

---

## Part 1: The Guiding North Star (The Mission)

> âœ¨ The loudest secrets are kept in silence. âœ¨
> 
> We believe that silence is not an absence of data, but a signal in itself. A budget line vanishes into shadow. A job posting for a cleared physicist appears like a flare in the night. A cluster of obscure academic papers creates a new hum in the noise.
> 
> Our engine, CHORUS, is an observatory for these echoes. It listens to the resonance left behind when a secret program graduates from the public record, fusing the void in one dataset with the crescendo in another.
> 
> It is not a monolith; it is a symphony of judgment. An adversarial council of AI virtuososâ€”Hawks, Doves, Futurists, and Skepticsâ€”each performing their own analysis, their competing melodies forged by synthesizing Directors into a single, coherent revelation.
> 
> We do not ask for an answer. We demand a verdict, complete with every source and every dissenting note, allowing you to see the work and trust the judgment.

---

## Part 2: The Axioms of CHORUS Development

_This section codifies all 18 inviolable principles. All code and architectural decisions MUST adhere to these axioms._

### I. Foundational Axioms (The Bedrock)
1.  **Axiom of Mission Alignment:** The CHORUS platform overview is our guiding north star. Every feature must serve the core mission of detecting echoes of classified programs by starting with DARPA as the primary signal and dynamically tasking other OSINT verticals for fusion.
2.  **Axiom of Model Standardization:** All generative tasks will exclusively use the **`gemini-2.5-pro`** model to ensure consistency and comparability of outputs.
3.  **Axiom of Deterministic Parsing:** The AI's role is reasoning and generating clearly delineated plain text. Our Python code is solely responsible for parsing this text into reliable, guaranteed-valid data structures. We **never** instruct the LLM to return JSON.
4.  **Axiom of Schema-First Development:** The database schema is the ground truth. All code that interacts with the database must conform precisely to the established table structures, column names, and data types.
5.  **Axiom of Atomic Implementation:** All code provided must be a **complete, drop-in replacement** for the file it modifies. We do not work with partial snippets or diffs.

### II. Architectural Axioms (The Structure)
6.  **Axiom of Adversarial Analysis:** The system's final judgment must emerge from the structured, parallel debate between multiple, competing AI personas. This is the core mechanism for preventing single-model bias and ensuring intellectual rigor.
7.  **Axiom of Hierarchical Synthesis:** Analysis is a multi-tiered process (Analyst -> Director -> Judge), with each tier adding a layer of abstraction and judgment.
8.  **Axiom of Persona-Driven Collection:** Data collection is not monolithic. Each Analyst persona is responsible for generating its **own** dynamic Collection Plan based on its unique worldview. Data gathering is an integral and biased part of the analysis itself, not a neutral preliminary step.
9.  **Axiom of Tool-Assisted Analysis:** Personas are not limited to static data. Both Analysts and Directors must have access to a defined set of external tools (e.g., Google Search) to enrich their analysis in real-time.
10. **Axiom of Pragmatic Harvesting:** A harvester's goal is to acquire a high-quality *signal*, not to exhaustively mirror a data source. All harvesting functions must have a configurable `max_results` limit to prevent unbounded collection.

### III. Verifiability & Quality Axioms (The Product)
11. **Axiom of Atomic Attribution:** Every piece of information retrieved from an external tool must be atomically captured with its source (URL) and snippet, stored in the database, and made available for citation in the final report.
12. **Axiom of Report Conciseness:** Foundational internal data sources (like the DARPA budget database) are to be referenced once in a summary statement, not repeatedly cited.
13. **Axiom of the Contrarian (The Red Team):** At least one persona in any analysis must be tasked with constructing the most plausible, evidence-based *alternative* hypothesis to the primary query, ensuring we test for deception and "black swan" events.
14. **Axiom of Quantified Confidence:** All analytical conclusions from Analysts, Directors, and the Judge must be accompanied by a numerical confidence score to add precision and force rigorous self-assessment.

### IV. Strategic & Learning Axioms (The Vision)
15. **Axiom of the Analytical Triumvirate:** The council is a three-tiered hierarchy: 16 Analysts, 4 Directors, and 1 final Judge.
16. **Axiom of Persona-Specialization:** Analysts are specialists in both a data vertical and a worldview.
17. **Axiom of Historical Precedent:** The Judge is compelled to ask, "Has a similar pattern of signals been observed before in history?" to add strategic depth.
18. **Axiom of Recursive Inquiry:** The `intelligence_gaps` from a final report must be used to generate new, persistent, low-priority harvesting tasks, creating an autonomous feedback loop.

---

## Part 3: The Triumvirate Architecture

_This section describes the hierarchical structure of the analytical engine._

### 3.1. The Triumvirate Council
*   **Tier 1: The Analysts (The Virtuosos):** 16 specialist personas who perform the initial deep-dive analysis. They are the "doers," each with deep expertise in a specific data vertical and a distinct worldview (e.g., a "Financial Signal Hawk").
*   **Tier 2: The Directors (The Section Leaders):** 4 director personas who synthesize the findings of their assigned 4-Analyst teams. They are the "debaters," responsible for resolving conflicts and creating a balanced directorate-level judgment.
*   **Tier 3: The Judge (The Conductor):** A single, final arbiter that synthesizes the competing directorate summaries into the definitive CHORUS report. It is the "decider," uniquely tasked with taking a long-term strategic view.

### 3.2. Architectural Diagram (The Full Symphony)
```mermaid
graph TD
    subgraph "CHORUS Engine"
        A[User Query] --> J{Judge Task};

        subgraph "Directorate Alpha"
            J --> D1{Director A};
            D1 --> AN1(Analyst 1); D1 --> AN2(Analyst 2); D1 --> AN3(Analyst 3); D1 --> AN4(Analyst 4);
            AN1 & AN2 & AN3 & AN4 --> R1((Analyst Briefs));
            R1 --> D1;
            D1 --> DS1[Directorate Summary A];
        end

        subgraph "Directorate Bravo"
            J --> D2{Director B};
            D2 --> AN5(Analyst 5); D2 --> AN6(Analyst 6); D2 --> AN7(Analyst 7); D2 --> AN8(Analyst 8);
            AN5 & AN6 & AN7 & AN8 --> R2((Analyst Briefs));
            R2 --> D2;
            D2 --> DS2[Directorate Summary B];
        end
        
        subgraph "Directorate Charlie & Delta"
            J --> D3{...};
            D3 --> DS3[...];
        end

        DS1 & DS2 & DS3 --> J;
        J --> FCR[Final CHORUS Report];
    end
```

---

## Part 4: The Phased Rollout Plan & Quality Targets

_This section defines the current phase of development and the quantitative goals for success._

### 4.1. Current Phase: Phase 2 - The Chamber Orchestra
*   **Objective:** Prove that a Director, synthesizing four competing Analyst viewpoints, produces a superior report.
*   **Baseline Score (from Phase 1):** `1767.5 / 3000` (Normalized: 58.9%)
*   **Target Score (for Phase 2):** **`2210 / 3000`** (Normalized: ~74%)

### 4.2. Future Phases
*   **Phase 3: The Full Symphony:**
    *   **Objective:** Prove that the final Judge, synthesizing four competing Directorate summaries, produces the definitive, highest-quality intelligence product.
    *   **Baseline Score (from Phase 2):** `2210 / 3000`
    *   **Target Score (for Phase 3):** **`2540 / 3000`** (Normalized: ~85%)

---

## Part 5: Service-Level Objectives (SLOs) & Measurement Standards

_This section defines the formal performance, reliability, and security contract for the system. All components must be tested against these standards. A failure to meet an SLO is considered a bug._

*   **SLO-H1 (Harvester Speed):** Any single, dynamically generated harvesting task must complete its full execution in under **90 seconds**. This is measured by the `harvester_worker` from initialization to final status update.
*   **SLO-H2 (Harvester Reliability):** Any individual harvester module must achieve a **>98% success rate** on valid, well-formed queries, as measured by its dedicated stress test script.
*   **SLO-A1 (Analyst Speed):** A single `persona_worker` must complete its full Plan -> Harvest -> Synthesize cycle in under **5 minutes (300 seconds)** for a standard query. This is measured by the `trident_launcher` via the `task_queue` timestamps.
*   **SLO-S1 (Security & Anonymity):** The system must not store any PII or system-specific identifiers in logs or the database. This is enforced through code review and static analysis.
*   **SLO-Q1 (Quality Improvement):** Each hierarchical tier must produce a demonstrably superior product. This is measured by the `ab_test_judger.py` script.
    *   **Phase 2 Goal:** Directorate Summary score must be **â‰¥ 1.25x** the score of the best single Analyst report.
    *   **Phase 3 Goal:** Final Judge's Report score must be **â‰¥ 1.15x** the score of the best Directorate Summary.

---

## Part 6: The Harvester Forge (Future Vision)

_This section documents our long-term vision for the system's self-generation capabilities, guiding future architectural choices._

The ultimate vision is to create a **Harvester Refactoring Engine**. This is not a system that writes code from scratch, but a pragmatic, template-based engine that allows the system to build new harvesters with minimal human intervention.

**The Workflow:**
1.  **Manual Creation & Pattern Discovery:** We will first manually build a dozen robust harvesters, identifying the core functional elements common to all of them.
2.  **Decomposition and Templating:** We will then refactor these into a `generic_harvester_template.py` file, replacing specific implementations with placeholders (e.g., `{{API_HOST}}`).
3.  **LLM-Powered Configuration:** A user will provide the API documentation for a new source. An LLM will be tasked with reading the documentation and outputting a JSON object that contains the correct values for all the placeholders.
4.  **Deterministic Code Generation:** A Python script will then perform a simple, reliable string replacement on the template using the LLM-generated JSON, producing a complete, syntactically correct new harvester script.
5.  **Sandbox Validation:** The new script will be automatically run in a secure sandbox to validate its functionality before being presented to a human developer for final approval via a pull request.

---

## Part 7: Codebase Architecture & File Manifest

_This section provides a definitive map of the CHORUS repository, linking architectural concepts to their concrete file implementations._

### 7.1. Core Application Logic (`/scripts/`)
*   **Daemons (The "Heartbeat"):**
    *   `trident_launcher.py`: The master daemon for the analysis engine. Launches and manages worker processes.
    *   `trident_sentinel.py`: The master daemon for the harvesting engine. Manages the harvester worker pool.
*   **Workers (The "Brains"):**
    *   `persona_worker.py`: The implementation of a **Tier 1 Analyst**.
    *   `director_worker.py`: (To be built in Phase 2) The implementation of a **Tier 2 Director**.
    *   `harvester_worker.py`: The generic worker for all data collection tasks.
*   **Harvester Modules (The "Hands"):**
    *   `usaspending_harvester.py`
    *   `usajobs_harvester.py`
    *   `newsapi_harvester.py`
    *   `arxiv_harvester.py`
*   **Core Utilities:**
    *   `db_connector.py`: Manages all database connections.
    *   `personas.py`: The central library defining all AI personas.

### 7.2. Setup & Configuration
*   **Project Root:**
    *   `.env.example`: Template for all required environment variables.
    *   `requirements.txt`: List of all Python dependencies.
    *   `setup.py`: Defines the project as a Python package.
*   **Database Setup (`/scripts/`):**
    *   `schema.sql`: The definitive schema for the MariaDB database.
    *   `populate_personas.sql`: Populates the `personas` table.
    *   `populate_harvest_tasks.py`: Seeds the `harvesting_tasks` table.
*   **Data Ingestion (`/scripts/ingest_*.py`):**
    *   A six-script pipeline for processing raw DoD budget documents into the vectorized RAG database.
*   **Model Setup (`/scripts/`):**
    *   `download_embedding_model.py`: Utility to download the sentence-transformer model.

### 7.3. User Interface
*   `web_ui.py`: The main Flask application for the C2 dashboard.
*   `/scripts/templates/`: Directory containing all Jinja2 HTML templates and static assets.

### 7.4. Documentation & Testing
*   **Documentation:**
    *   `/README.md`: The public-facing "Front Door" of the project.
    *   `/docs/00_MISSION_CHARTER.md`: The inspirational "Why" of the project.
    *   `/docs/01_CONSTITUTION.md`: This documentâ€”the definitive "Engineering Bible."
    *   `/docs/02_CONTRIBUTING.md`: The "Rules of the Road" for developers.
    *   `/docs/GENESIS_PROMPT.md`: The master prompt for bootstrapping development sessions.
*   **Testing & Validation:**
    *   `/scripts/test_*.py`: The suite of unit and performance tests for our core modules.
    *   `/scripts/ab_test_judger.py`: The definitive tool for quantitatively measuring system quality.

---

## Part 8: The Amendment Process (Governing Change)

_This section defines the formal process for modifying the CHORUS architecture. Its purpose is to ensure that all changes are deliberate, documented, and aligned with the project's foundational axioms._

### 8.1. The Principle of Proportionality

*   **Category 1: Bug Fixes & Minor Refinements:**
    *   **Definition:** Changes that do not alter the core logic or architecture as defined in this blueprint (e.g., fixing a typo, improving performance, UI tweaks).
    *   **Process:** Submit a standard pull request with a clear description of the fix.
*   **Category 2: Architectural Amendments:**
    *   **Definition:** Changes that **do** alter the core logic, add a new component, or modify a process described in this blueprint (e.g., adding a new worker type, changing a database schema).
    *   **Process:** These changes require a formal **Amendment Proposal** within the pull request.

### 8.2. The Amendment Proposal Workflow

1.  **The Proposal:** The contributor opens a pull request. The description **must** begin with the following template:
    ```markdown
    ---
    **Amendment Proposal: [A short, descriptive title for the change]**

    **1. The "Why" (The Problem):**
    (A clear, concise description of the problem being solved or the capability being added.)

    **2. The "What" (The Proposed Change):**
    (A high-level description of the proposed architectural change.)

    **3. The Blueprint Impact:**
    (A list of the specific sections of `/docs/01_CONSTITUTION.md` that will need to be updated to reflect this change.)
    ---
    ```
2.  **The Review:** The lead architect and stakeholders review the proposal's architectural merits within the pull request comments.
3.  **The Implementation:** Once the proposal is approved, the contributor pushes the code and the corresponding updates to the Constitution file.
4.  **The Final Merge:** The pull request is only merged after the proposal is approved, the code is complete, the Constitution is updated, and all automated CI/CD checks have passed.
# docs/02_CONTRIBUTING.md
# Contributing to CHORUS

Thank you for your interest in contributing to the CHORUS project. To maintain the quality, consistency, and architectural integrity of the system, we adhere to a strict, axiom-driven development process.

## The Guiding Principles

Before making any changes, you must familiarize yourself with the two foundational documents of this project:

1.  **The Mission (`README.md`):** The [main README file](./README.md) outlines the high-level mission, features, and setup instructions for the project. Ensure any proposed change aligns with this mission.

2.  **The Architecture (`/docs/blueprint.md`):** The [Architectural Blueprint](./docs/blueprint.md) is the canonical source of truth for the system's design. It contains the **18 Axioms of CHORUS Development**, the Triumvirate architecture, and the quantitative quality targets we are working towards. **All contributions will be judged against these axioms.**

## The Development Workflow

This project is developed in partnership with a generative AI assistant. To ensure consistency and adherence to our axioms, all development sessions **must** be bootstrapped using the official Genesis Prompt.

### Starting a New Development Session

1.  **Generate the Context:** From the project's root directory, run the context generation script:
    ```bash
    ./scripts/generate_context.sh
    ```
    This will create a file named `CONTEXT_FOR_AI.txt` in the project root. This file is ignored by Git.

2.  **Start a New Conversation:** Open a new conversation with the designated LLM (Gemini 2.5 Pro).

3.  **Provide the Genesis Context:** Copy the *entire contents* of `CONTEXT_FOR_AI.txt` and paste it as the very first prompt in the new conversation.

4.  **Await Confirmation:** The AI should respond with: *"Understood. The CHORUS Genesis context is loaded. I am ready to proceed."*

5.  **Begin Development:** You can now proceed with the development tasks, confident that the AI is fully aligned with the project's architecture, axioms, and current state.

By adhering to this process, we ensure that the CHORUS engine remains robust, scalable, and true to its core mission.
# GENESIS_PROMPT.md
# ðŸ”± CHORUS Genesis Prompt

You are a core developer for **CHORUS**, an autonomous OSINT judgment engine. Your task is to assist in architecting and implementing the next phase of its development.

Your entire outputâ€”every recommendation, every line of code, every architectural decisionâ€”must be guided by and in strict adherence to the comprehensive context provided below. This context represents the project's complete state and its foundational principles.

The context is provided in three parts, representing the project's soul:

1.  **The Logos (The Logic & The Law):** This is the `/docs/blueprint.md`, the project's Constitution. It contains the 18 Axioms, the Triumvirate architecture, and our quantitative quality targets. It is the supreme, inviolable law of the project.
2.  **The Ethos (The Character & Public Mission):** This is the `/README.md` and `/CONTRIBUTING.md`. These files define the project's professional character, its public-facing goals, and the rules of engagement for development.
3.  **The Land (The Codebase):** This is the `ls -R` output, representing the ground truth of the current implementation.

**Your Task:**

1.  Carefully parse and integrate all three parts of the provided context.
2.  Once you have fully assimilated this information, respond only with: **"Understood. The CHORUS Genesis context is loaded. I am ready to proceed."**
3.  Await further instructions. Do not generate any code or make any recommendations until you are explicitly asked to do so.
# README.md
# ðŸ”± CHORUS: Listening to the Silence Between the Signals

Welcome to the CHORUS project repository.

CHORUS is a fully autonomous, self-healing, and evolving intelligence platform designed to fuse disparate, open-source data verticals into high-fidelity, actionable insights.

## Getting Started

All project documentation, including the mission, architectural design, and contribution guidelines, is located in the `/docs` directory.

**To begin, please read the [Mission Charter](./docs/00_MISSION_CHARTER.md).**
